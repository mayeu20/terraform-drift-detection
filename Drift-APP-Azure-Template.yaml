# This is an Azure Devops pipeline templates to be used for application stack drift detection in Azure.
# Values in the variables section under the  Application-specific details as variables will need to be udpates.
# Values on ligne 25 and 26 will need to be udpated to match the application named for the drift detection.
# Values are set as examples only.

trigger: none

pool:
  name: xxxxxx # Define your self hosted agent pool or use Azure hosted agent config below
  vmImage: 'ubuntu-latest'  # or windows-latest if preferred

variables:
  group: TF_SPVARS_DRIFT # Azure DevOps Library variables group that you created

  # Application-specific details as variables
  appFolder: './04_Apps/XYZ' #Path to the Application stack folder containing your terraform code
  backendConfig: './XYZ.tfbackend' #Path to your tfbackend file in the appFolder
  varFile: './XYZ.tfvars' #Path to your tfvars file in the appFolder
  planOutputFile: 'XYZ.plan' #Name of the terraform output file
  driftReportFile: 'XYZ.txt' #Name of the Drift Report
  filteredDriftReportFile: 'XYZ_filtered.txt' #Name of the Filtered Drift report
  failOnDrift: true
  
jobs:
- job: Drift_XYZ #to be updated for each Application stack pipeline
  displayName: "Drift Check XYZ" #to be updated for each Application stack pipeline
  timeoutInMinutes: 600
  steps:
  - task: TerraformInstaller@0
    displayName: "Install Terraform latest"
    inputs:
      terraformVersion: 'latest'

  - script: |
      cd $(appFolder)
      terraform init -input=false -backend-config="$(backendConfig)" -upgrade
    displayName: 'Run Init'
    env:
      ARM_CLIENT_ID: $(ARM_CLIENT_ID)
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      ARM_TENANT_ID: $(ARM_TENANT_ID)
      ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)

  - script: |
      cd $(appFolder)
      terraform init -input=false -backend-config="$(backendConfig)" -upgrade
      terraform plan -var-file="$(varFile)" -refresh-only -no-color -out=$(planOutputFile) || exit 0
    displayName: 'Run Plan'
    env:
      ARM_CLIENT_ID: $(ARM_CLIENT_ID)
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      ARM_TENANT_ID: $(ARM_TENANT_ID)
      ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)

  - script: |
      cd $(appFolder)
      terraform show -no-color $(planOutputFile) > $(driftReportFile)
    displayName: 'Generate Drift Report'

  - script: |
      cd $(appFolder)
      if grep -q "No changes. Infrastructure is up-to-date." $(driftReportFile); then
        echo "##[section]No drift detected."
        echo "##vso[task.setvariable variable=DriftDetected]false"
      else
        echo "##vso[task.logissue type=warning]Drift detected in infrastructure."
        echo "##[section]Drift Details:"
        cat $(driftReportFile)
        echo "##vso[task.setvariable variable=DriftDetected]true"
      fi
    displayName: 'Check for Drift'

  # Step to install Python and the necessary packages
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.x'
    inputs:
      versionSpec: '3.x'
      addToPath: true

  - script: |
      python -m pip install --upgrade pip
      pip install openai
      pip install requests
    displayName: 'Install Python Dependencies'
  # Process Drift Report with Azure OpenAI LLM
  - task: PythonScript@0
    displayName: 'Process Drift Report with Azure OpenAI LLM'
    condition: eq(variables.DriftDetected, 'true') # Only analyse if drift is detected
    inputs:
      scriptPath: './Modules/drift_analyse_azureopenai.py'
    env:
      AZURE_OPENAI_API_KEY: $(OPENAI_API_KEY)
      AZURE_OPENAI_API_BASE: $(AZURE_OPENAI_ENDPOINT)
      APP_FOLDER: $(appFolder)
      DRIFT_REPORT_FILE: $(driftReportFile)
      FILTERED_DRIFT_REPORT_FILE: $(filteredDriftReportFile)

  # Send Filtered Drift Report to Azure Monitor
  - task: PythonScript@0
    displayName: 'Send Filtered Drift Report to Azure Monitor'
    condition: eq(variables.DriftDetected, 'true')
    inputs:
      scriptPath: './Modules/drift_sent_to_loganalytics.py'
    env:
      LAWorkspaceID: '$(LAWorkspaceID)'
      LAWorkspaceKey: '$(LAWorkspaceKey)'
      appFolder: '$(appFolder)'
      filteredDriftReportFile: '$(filteredDriftReportFile)'
      Build_DefinitionName: '$(Build.DefinitionName)'
      Build_BuildId: '$(Build.BuildId)'

  - publish: $(appFolder)/$(filteredDriftReportFile)
    artifact: drift-report
    displayName: 'Publish Filtered Drift Report'

  # Send Drift Report to Microsoft Teams
  - task: PythonScript@0
    displayName: 'Send Drift Report to Microsoft Teams'
    condition: eq(variables.DriftDetected, 'true')
    inputs:
      scriptPath: './Modules/drift_send_to_msteams.py'
    env:
      Build_DefinitionName: '$(Build.DefinitionName)'
      Build_BuildId: '$(Build.BuildId)'
      appFolder: $(appFolder)
      filteredDriftReportFile: $(filteredDriftReportFile)
 

  # Send Drift Report via Email
  - task: PythonScript@0
    displayName: 'Send Drift Report via Email'
    condition: eq(variables.DriftDetected, 'true')  # Only send the email if drift is detected
    inputs:
      scriptPath: './Modules/drift_send_email.py'
    env:
      APP_FOLDER: $(appFolder)
      FILTERED_DRIFT_REPORT_FILE: $(filteredDriftReportFile)
      SMTP_PASSWORD: $(SMTP_PASSWORD)

  